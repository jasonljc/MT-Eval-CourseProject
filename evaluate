#!/usr/bin/env python
import argparse # optparse is deprecated
import codecs
import config
from itertools import islice # slicing for iterators
import meteor_evaluator
import preprocess
import word_match

def main():
    parser = argparse.ArgumentParser(description='Evaluate translation hypotheses.')
    parser.add_argument('-i', '--input', default='data/hyp1-hyp2-ref',
            help='input file (default data/hyp1-hyp2-ref)')
    parser.add_argument('-n', '--num_sentences', default=None, type=int,
            help='Number of hypothesis pairs to evaluate')
    parser.add_argument('-a', '--alpha', default=0.5, type=float)
    # note that if x == [1, 2, 3], then x[:None] == x[:] == x (copy); no need for sys.maxint
    opts = parser.parse_args()
 
    # we create a generator and avoid loading all sentences into a list
    def sentences():
        with codecs.open(opts.input, 'r', 'utf-8') as f:
            for pair in f:
                yield [sentence.strip().split() for sentence in pair.split(' ||| ')]
 
    # note: the -n option does not work in the original code
    for h1, h2, ref in islice(sentences(), opts.num_sentences):
        if config.remove_punc:
            h1 = preprocess.remove_punctuations(h1)
            h2 = preprocess.remove_punctuations(h2)
            ref = preprocess.remove_punctuations(ref)
        h1_unigram = word_match.word_matches(h1, ref)
        h2_unigram = word_match.word_matches(h2, ref)    
        h1_meteor = meteor_evaluator.meteor(h1, ref, opts.alpha, h1_unigram)
        h2_meteor = meteor_evaluator.meteor(h2, ref, opts.alpha, h2_unigram)
        # h1_bleu = bleu_evaluator.bleu(h1, ref, h1_unigram)
        # h2_bleu = bleu_evaluator.bleu(h2, ref, h2_unigram)
        print(1 if h1_meteor > h2_meteor else # \begin{cases}
                (0 if h1_meteor == h2_meteor
                    else -1)) # \end{cases}
 
# convention to allow import of this file as a module
if __name__ == '__main__':
    main()
